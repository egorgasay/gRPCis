// Code generated by MockGen. DO NOT EDIT.
// Source: storage_grpc.pb.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	storage "itisadb/pkg/api/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStorageClient is a mock of StorageClient interface.
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient.
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance.
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// AttachToIndex mocks base method.
func (m *MockStorageClient) AttachToIndex(ctx context.Context, in *storage.AttachToIndexRequest, opts ...grpc.CallOption) (*storage.AttachToIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachToIndex", varargs...)
	ret0, _ := ret[0].(*storage.AttachToIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToIndex indicates an expected call of AttachToIndex.
func (mr *MockStorageClientMockRecorder) AttachToIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToIndex", reflect.TypeOf((*MockStorageClient)(nil).AttachToIndex), varargs...)
}

// Delete mocks base method.
func (m *MockStorageClient) Delete(ctx context.Context, in *storage.DeleteRequest, opts ...grpc.CallOption) (*storage.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*storage.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageClient)(nil).Delete), varargs...)
}

// DeleteAttr mocks base method.
func (m *MockStorageClient) DeleteAttr(ctx context.Context, in *storage.DeleteAttrRequest, opts ...grpc.CallOption) (*storage.DeleteAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttr", varargs...)
	ret0, _ := ret[0].(*storage.DeleteAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttr indicates an expected call of DeleteAttr.
func (mr *MockStorageClientMockRecorder) DeleteAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttr", reflect.TypeOf((*MockStorageClient)(nil).DeleteAttr), varargs...)
}

// DeleteIndex mocks base method.
func (m *MockStorageClient) DeleteIndex(ctx context.Context, in *storage.DeleteIndexRequest, opts ...grpc.CallOption) (*storage.DeleteIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIndex", varargs...)
	ret0, _ := ret[0].(*storage.DeleteIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockStorageClientMockRecorder) DeleteIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockStorageClient)(nil).DeleteIndex), varargs...)
}

// Get mocks base method.
func (m *MockStorageClient) Get(ctx context.Context, in *storage.GetRequest, opts ...grpc.CallOption) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageClient)(nil).Get), varargs...)
}

// GetFromIndex mocks base method.
func (m *MockStorageClient) GetFromIndex(ctx context.Context, in *storage.GetFromIndexRequest, opts ...grpc.CallOption) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFromIndex", varargs...)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromIndex indicates an expected call of GetFromIndex.
func (mr *MockStorageClientMockRecorder) GetFromIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromIndex", reflect.TypeOf((*MockStorageClient)(nil).GetFromIndex), varargs...)
}

// GetIndex mocks base method.
func (m *MockStorageClient) GetIndex(ctx context.Context, in *storage.GetIndexRequest, opts ...grpc.CallOption) (*storage.GetIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndex", varargs...)
	ret0, _ := ret[0].(*storage.GetIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockStorageClientMockRecorder) GetIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockStorageClient)(nil).GetIndex), varargs...)
}

// IsIndex mocks base method.
func (m *MockStorageClient) IsIndex(ctx context.Context, in *storage.IsIndexRequest, opts ...grpc.CallOption) (*storage.IsIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsIndex", varargs...)
	ret0, _ := ret[0].(*storage.IsIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIndex indicates an expected call of IsIndex.
func (mr *MockStorageClientMockRecorder) IsIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIndex", reflect.TypeOf((*MockStorageClient)(nil).IsIndex), varargs...)
}

// NewIndex mocks base method.
func (m *MockStorageClient) NewIndex(ctx context.Context, in *storage.NewIndexRequest, opts ...grpc.CallOption) (*storage.NewIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIndex", varargs...)
	ret0, _ := ret[0].(*storage.NewIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIndex indicates an expected call of NewIndex.
func (mr *MockStorageClientMockRecorder) NewIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIndex", reflect.TypeOf((*MockStorageClient)(nil).NewIndex), varargs...)
}

// Set mocks base method.
func (m *MockStorageClient) Set(ctx context.Context, in *storage.SetRequest, opts ...grpc.CallOption) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStorageClientMockRecorder) Set(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageClient)(nil).Set), varargs...)
}

// SetToIndex mocks base method.
func (m *MockStorageClient) SetToIndex(ctx context.Context, in *storage.SetToIndexRequest, opts ...grpc.CallOption) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetToIndex", varargs...)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToIndex indicates an expected call of SetToIndex.
func (mr *MockStorageClientMockRecorder) SetToIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToIndex", reflect.TypeOf((*MockStorageClient)(nil).SetToIndex), varargs...)
}

// Size mocks base method.
func (m *MockStorageClient) Size(ctx context.Context, in *storage.IndexSizeRequest, opts ...grpc.CallOption) (*storage.IndexSizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Size", varargs...)
	ret0, _ := ret[0].(*storage.IndexSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockStorageClientMockRecorder) Size(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockStorageClient)(nil).Size), varargs...)
}

// MockStorageServer is a mock of StorageServer interface.
type MockStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServerMockRecorder
}

// MockStorageServerMockRecorder is the mock recorder for MockStorageServer.
type MockStorageServerMockRecorder struct {
	mock *MockStorageServer
}

// NewMockStorageServer creates a new mock instance.
func NewMockStorageServer(ctrl *gomock.Controller) *MockStorageServer {
	mock := &MockStorageServer{ctrl: ctrl}
	mock.recorder = &MockStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServer) EXPECT() *MockStorageServerMockRecorder {
	return m.recorder
}

// AttachToIndex mocks base method.
func (m *MockStorageServer) AttachToIndex(arg0 context.Context, arg1 *storage.AttachToIndexRequest) (*storage.AttachToIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.AttachToIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToIndex indicates an expected call of AttachToIndex.
func (mr *MockStorageServerMockRecorder) AttachToIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToIndex", reflect.TypeOf((*MockStorageServer)(nil).AttachToIndex), arg0, arg1)
}

// Delete mocks base method.
func (m *MockStorageServer) Delete(arg0 context.Context, arg1 *storage.DeleteRequest) (*storage.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageServer)(nil).Delete), arg0, arg1)
}

// DeleteAttr mocks base method.
func (m *MockStorageServer) DeleteAttr(arg0 context.Context, arg1 *storage.DeleteAttrRequest) (*storage.DeleteAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttr", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttr indicates an expected call of DeleteAttr.
func (mr *MockStorageServerMockRecorder) DeleteAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttr", reflect.TypeOf((*MockStorageServer)(nil).DeleteAttr), arg0, arg1)
}

// DeleteIndex mocks base method.
func (m *MockStorageServer) DeleteIndex(arg0 context.Context, arg1 *storage.DeleteIndexRequest) (*storage.DeleteIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockStorageServerMockRecorder) DeleteIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockStorageServer)(nil).DeleteIndex), arg0, arg1)
}

// Get mocks base method.
func (m *MockStorageServer) Get(arg0 context.Context, arg1 *storage.GetRequest) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageServer)(nil).Get), arg0, arg1)
}

// GetFromIndex mocks base method.
func (m *MockStorageServer) GetFromIndex(arg0 context.Context, arg1 *storage.GetFromIndexRequest) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromIndex indicates an expected call of GetFromIndex.
func (mr *MockStorageServerMockRecorder) GetFromIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromIndex", reflect.TypeOf((*MockStorageServer)(nil).GetFromIndex), arg0, arg1)
}

// GetIndex mocks base method.
func (m *MockStorageServer) GetIndex(arg0 context.Context, arg1 *storage.GetIndexRequest) (*storage.GetIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.GetIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockStorageServerMockRecorder) GetIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockStorageServer)(nil).GetIndex), arg0, arg1)
}

// IsIndex mocks base method.
func (m *MockStorageServer) IsIndex(arg0 context.Context, arg1 *storage.IsIndexRequest) (*storage.IsIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.IsIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIndex indicates an expected call of IsIndex.
func (mr *MockStorageServerMockRecorder) IsIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIndex", reflect.TypeOf((*MockStorageServer)(nil).IsIndex), arg0, arg1)
}

// NewIndex mocks base method.
func (m *MockStorageServer) NewIndex(arg0 context.Context, arg1 *storage.NewIndexRequest) (*storage.NewIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.NewIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIndex indicates an expected call of NewIndex.
func (mr *MockStorageServerMockRecorder) NewIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIndex", reflect.TypeOf((*MockStorageServer)(nil).NewIndex), arg0, arg1)
}

// Set mocks base method.
func (m *MockStorageServer) Set(arg0 context.Context, arg1 *storage.SetRequest) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStorageServerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageServer)(nil).Set), arg0, arg1)
}

// SetToIndex mocks base method.
func (m *MockStorageServer) SetToIndex(arg0 context.Context, arg1 *storage.SetToIndexRequest) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToIndex", arg0, arg1)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToIndex indicates an expected call of SetToIndex.
func (mr *MockStorageServerMockRecorder) SetToIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToIndex", reflect.TypeOf((*MockStorageServer)(nil).SetToIndex), arg0, arg1)
}

// Size mocks base method.
func (m *MockStorageServer) Size(arg0 context.Context, arg1 *storage.IndexSizeRequest) (*storage.IndexSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0, arg1)
	ret0, _ := ret[0].(*storage.IndexSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockStorageServerMockRecorder) Size(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockStorageServer)(nil).Size), arg0, arg1)
}

// mustEmbedUnimplementedStorageServer mocks base method.
func (m *MockStorageServer) mustEmbedUnimplementedStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageServer")
}

// mustEmbedUnimplementedStorageServer indicates an expected call of mustEmbedUnimplementedStorageServer.
func (mr *MockStorageServerMockRecorder) mustEmbedUnimplementedStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageServer", reflect.TypeOf((*MockStorageServer)(nil).mustEmbedUnimplementedStorageServer))
}

// MockUnsafeStorageServer is a mock of UnsafeStorageServer interface.
type MockUnsafeStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStorageServerMockRecorder
}

// MockUnsafeStorageServerMockRecorder is the mock recorder for MockUnsafeStorageServer.
type MockUnsafeStorageServerMockRecorder struct {
	mock *MockUnsafeStorageServer
}

// NewMockUnsafeStorageServer creates a new mock instance.
func NewMockUnsafeStorageServer(ctrl *gomock.Controller) *MockUnsafeStorageServer {
	mock := &MockUnsafeStorageServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStorageServer) EXPECT() *MockUnsafeStorageServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStorageServer mocks base method.
func (m *MockUnsafeStorageServer) mustEmbedUnimplementedStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageServer")
}

// mustEmbedUnimplementedStorageServer indicates an expected call of mustEmbedUnimplementedStorageServer.
func (mr *MockUnsafeStorageServerMockRecorder) mustEmbedUnimplementedStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageServer", reflect.TypeOf((*MockUnsafeStorageServer)(nil).mustEmbedUnimplementedStorageServer))
}
