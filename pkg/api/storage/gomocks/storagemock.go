// Code generated by MockGen. DO NOT EDIT.
// Source: storage_grpc.pb.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	storage "itisadb/pkg/api/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStorageClient is a mock of StorageClient interface.
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient.
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance.
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// AttachToObject mocks base method.
func (m *MockStorageClient) AttachToObject(ctx context.Context, in *storage.AttachToObjectRequest, opts ...grpc.CallOption) (*storage.AttachToObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachToObject", varargs...)
	ret0, _ := ret[0].(*storage.AttachToObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToObject indicates an expected call of AttachToObject.
func (mr *MockStorageClientMockRecorder) AttachToObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToObject", reflect.TypeOf((*MockStorageClient)(nil).AttachToObject), varargs...)
}

// Delete mocks base method.
func (m *MockStorageClient) Delete(ctx context.Context, in *storage.DeleteRequest, opts ...grpc.CallOption) (*storage.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*storage.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageClient)(nil).Delete), varargs...)
}

// DeleteAttr mocks base method.
func (m *MockStorageClient) DeleteAttr(ctx context.Context, in *storage.DeleteAttrRequest, opts ...grpc.CallOption) (*storage.DeleteAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttr", varargs...)
	ret0, _ := ret[0].(*storage.DeleteAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttr indicates an expected call of DeleteAttr.
func (mr *MockStorageClientMockRecorder) DeleteAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttr", reflect.TypeOf((*MockStorageClient)(nil).DeleteAttr), varargs...)
}

// DeleteObject mocks base method.
func (m *MockStorageClient) DeleteObject(ctx context.Context, in *storage.DeleteObjectRequest, opts ...grpc.CallOption) (*storage.DeleteObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(*storage.DeleteObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStorageClientMockRecorder) DeleteObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageClient)(nil).DeleteObject), varargs...)
}

// Get mocks base method.
func (m *MockStorageClient) Get(ctx context.Context, in *storage.GetRequest, opts ...grpc.CallOption) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageClient)(nil).Get), varargs...)
}

// GetFromObject mocks base method.
func (m *MockStorageClient) GetFromObject(ctx context.Context, in *storage.GetFromObjectRequest, opts ...grpc.CallOption) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFromObject", varargs...)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromObject indicates an expected call of GetFromObject.
func (mr *MockStorageClientMockRecorder) GetFromObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromObject", reflect.TypeOf((*MockStorageClient)(nil).GetFromObject), varargs...)
}

// ObjectToJSON mocks base method.
func (m *MockStorageClient) ObjectToJSON(ctx context.Context, in *storage.ObjectToJSONRequest, opts ...grpc.CallOption) (*storage.ObjectToJSONResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectToJSON", varargs...)
	ret0, _ := ret[0].(*storage.ObjectToJSONResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectToJSON indicates an expected call of ObjectToJSON.
func (mr *MockStorageClientMockRecorder) ObjectToJSON(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectToJSON", reflect.TypeOf((*MockStorageClient)(nil).ObjectToJSON), varargs...)
}

// IsObject mocks base method.
func (m *MockStorageClient) IsObject(ctx context.Context, in *storage.IsObjectRequest, opts ...grpc.CallOption) (*storage.IsObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsObject", varargs...)
	ret0, _ := ret[0].(*storage.IsObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObject indicates an expected call of IsObject.
func (mr *MockStorageClientMockRecorder) IsObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObject", reflect.TypeOf((*MockStorageClient)(nil).IsObject), varargs...)
}

// NewObject mocks base method.
func (m *MockStorageClient) NewObject(ctx context.Context, in *storage.NewObjectRequest, opts ...grpc.CallOption) (*storage.NewObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewObject", varargs...)
	ret0, _ := ret[0].(*storage.NewObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject.
func (mr *MockStorageClientMockRecorder) NewObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockStorageClient)(nil).NewObject), varargs...)
}

// Set mocks base method.
func (m *MockStorageClient) Set(ctx context.Context, in *storage.SetRequest, opts ...grpc.CallOption) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStorageClientMockRecorder) Set(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageClient)(nil).Set), varargs...)
}

// SetToObject mocks base method.
func (m *MockStorageClient) SetToObject(ctx context.Context, in *storage.SetToObjectRequest, opts ...grpc.CallOption) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetToObject", varargs...)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToObject indicates an expected call of SetToObject.
func (mr *MockStorageClientMockRecorder) SetToObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToObject", reflect.TypeOf((*MockStorageClient)(nil).SetToObject), varargs...)
}

// Size mocks base method.
func (m *MockStorageClient) Size(ctx context.Context, in *storage.ObjectSizeRequest, opts ...grpc.CallOption) (*storage.ObjectSizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Size", varargs...)
	ret0, _ := ret[0].(*storage.ObjectSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockStorageClientMockRecorder) Size(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockStorageClient)(nil).Size), varargs...)
}

// MockStorageServer is a mock of StorageServer interface.
type MockStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServerMockRecorder
}

// MockStorageServerMockRecorder is the mock recorder for MockStorageServer.
type MockStorageServerMockRecorder struct {
	mock *MockStorageServer
}

// NewMockStorageServer creates a new mock instance.
func NewMockStorageServer(ctrl *gomock.Controller) *MockStorageServer {
	mock := &MockStorageServer{ctrl: ctrl}
	mock.recorder = &MockStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServer) EXPECT() *MockStorageServerMockRecorder {
	return m.recorder
}

// AttachToObject mocks base method.
func (m *MockStorageServer) AttachToObject(arg0 context.Context, arg1 *storage.AttachToObjectRequest) (*storage.AttachToObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.AttachToObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToObject indicates an expected call of AttachToObject.
func (mr *MockStorageServerMockRecorder) AttachToObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToObject", reflect.TypeOf((*MockStorageServer)(nil).AttachToObject), arg0, arg1)
}

// Delete mocks base method.
func (m *MockStorageServer) Delete(arg0 context.Context, arg1 *storage.DeleteRequest) (*storage.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageServer)(nil).Delete), arg0, arg1)
}

// DeleteAttr mocks base method.
func (m *MockStorageServer) DeleteAttr(arg0 context.Context, arg1 *storage.DeleteAttrRequest) (*storage.DeleteAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttr", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttr indicates an expected call of DeleteAttr.
func (mr *MockStorageServerMockRecorder) DeleteAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttr", reflect.TypeOf((*MockStorageServer)(nil).DeleteAttr), arg0, arg1)
}

// DeleteObject mocks base method.
func (m *MockStorageServer) DeleteObject(arg0 context.Context, arg1 *storage.DeleteObjectRequest) (*storage.DeleteObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.DeleteObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockStorageServerMockRecorder) DeleteObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockStorageServer)(nil).DeleteObject), arg0, arg1)
}

// Get mocks base method.
func (m *MockStorageServer) Get(arg0 context.Context, arg1 *storage.GetRequest) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageServer)(nil).Get), arg0, arg1)
}

// GetFromObject mocks base method.
func (m *MockStorageServer) GetFromObject(arg0 context.Context, arg1 *storage.GetFromObjectRequest) (*storage.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromObject indicates an expected call of GetFromObject.
func (mr *MockStorageServerMockRecorder) GetFromObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromObject", reflect.TypeOf((*MockStorageServer)(nil).GetFromObject), arg0, arg1)
}

// ObjectToJSON mocks base method.
func (m *MockStorageServer) ObjectToJSON(arg0 context.Context, arg1 *storage.ObjectToJSONRequest) (*storage.ObjectToJSONResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectToJSON", arg0, arg1)
	ret0, _ := ret[0].(*storage.ObjectToJSONResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectToJSON indicates an expected call of ObjectToJSON.
func (mr *MockStorageServerMockRecorder) ObjectToJSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectToJSON", reflect.TypeOf((*MockStorageServer)(nil).ObjectToJSON), arg0, arg1)
}

// IsObject mocks base method.
func (m *MockStorageServer) IsObject(arg0 context.Context, arg1 *storage.IsObjectRequest) (*storage.IsObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.IsObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObject indicates an expected call of IsObject.
func (mr *MockStorageServerMockRecorder) IsObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObject", reflect.TypeOf((*MockStorageServer)(nil).IsObject), arg0, arg1)
}

// NewObject mocks base method.
func (m *MockStorageServer) NewObject(arg0 context.Context, arg1 *storage.NewObjectRequest) (*storage.NewObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.NewObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject.
func (mr *MockStorageServerMockRecorder) NewObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockStorageServer)(nil).NewObject), arg0, arg1)
}

// Set mocks base method.
func (m *MockStorageServer) Set(arg0 context.Context, arg1 *storage.SetRequest) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStorageServerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageServer)(nil).Set), arg0, arg1)
}

// SetToObject mocks base method.
func (m *MockStorageServer) SetToObject(arg0 context.Context, arg1 *storage.SetToObjectRequest) (*storage.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToObject", arg0, arg1)
	ret0, _ := ret[0].(*storage.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToObject indicates an expected call of SetToObject.
func (mr *MockStorageServerMockRecorder) SetToObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToObject", reflect.TypeOf((*MockStorageServer)(nil).SetToObject), arg0, arg1)
}

// Size mocks base method.
func (m *MockStorageServer) Size(arg0 context.Context, arg1 *storage.ObjectSizeRequest) (*storage.ObjectSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0, arg1)
	ret0, _ := ret[0].(*storage.ObjectSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockStorageServerMockRecorder) Size(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockStorageServer)(nil).Size), arg0, arg1)
}

// mustEmbedUnimplementedStorageServer mocks base method.
func (m *MockStorageServer) mustEmbedUnimplementedStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageServer")
}

// mustEmbedUnimplementedStorageServer indicates an expected call of mustEmbedUnimplementedStorageServer.
func (mr *MockStorageServerMockRecorder) mustEmbedUnimplementedStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageServer", reflect.TypeOf((*MockStorageServer)(nil).mustEmbedUnimplementedStorageServer))
}

// MockUnsafeStorageServer is a mock of UnsafeStorageServer interface.
type MockUnsafeStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStorageServerMockRecorder
}

// MockUnsafeStorageServerMockRecorder is the mock recorder for MockUnsafeStorageServer.
type MockUnsafeStorageServerMockRecorder struct {
	mock *MockUnsafeStorageServer
}

// NewMockUnsafeStorageServer creates a new mock instance.
func NewMockUnsafeStorageServer(ctrl *gomock.Controller) *MockUnsafeStorageServer {
	mock := &MockUnsafeStorageServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStorageServer) EXPECT() *MockUnsafeStorageServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStorageServer mocks base method.
func (m *MockUnsafeStorageServer) mustEmbedUnimplementedStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageServer")
}

// mustEmbedUnimplementedStorageServer indicates an expected call of mustEmbedUnimplementedStorageServer.
func (mr *MockUnsafeStorageServerMockRecorder) mustEmbedUnimplementedStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageServer", reflect.TypeOf((*MockUnsafeStorageServer)(nil).mustEmbedUnimplementedStorageServer))
}
